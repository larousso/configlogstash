input {
  redis {
    host => "127.0.0.1"
    data_type => "list"
    key => "logstash"
    codec => json
  }
}
filter {
  if [type]=="syslog" {
	grok {
    	match => { "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{GREEDYDATA:syslog_message}" }
	}
    mutate {
	    rename => [ "message", "raw_message" ]		
	    rename => [ "syslog_message", "message" ]
	}
  }
  grok {
   	match => { "message" => "%{TIMESTAMP_ISO8601:messageTimestamp} - \[%{LOGLEVEL:loglevel}\] - from %{WORD:appender} in %{NOTSPACE:thread} message numÃ©ro %{NUMBER:messageNum} current time %{DATE:messageDate}, bois : %{NOTSPACE:wood}, coord : \[%{NUMBER:coord.lat}, %{NUMBER:coord.lng}\]%{DATA:message}" }
  }
  date {
	  match => [ "messageTimestamp" , "YYYY-MM-dd HH:mm:ss,SSS" ]
  }
  mutate {
    add_field => [ "[coord][lnglat]", "%{coord.lng}",
                   "tmplat", "%{coord.lat}" ]
   }
   mutate {
    merge => [ "[coord][lnglat]", "tmplat" ]
   }
   mutate {
    convert => [ "[coord][lnglat]", "float" ]
    remove_field => [ "tmplat", "coord.lat", "coord.lng" ]
   }
}
output {
  stdout { codec => rubydebug codec => "json"}
  elasticsearch {
  	protocol => "http"
    host => "localhost"
  }
  if [loglevel]=="ERROR" {
	  mongodb {
		  collection => "logstash"
		  database => "logs"
		  uri => "mongodb://127.0.0.1:27017"		  
	  }
  }
}